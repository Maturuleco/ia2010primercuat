import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;


public class ParserComments {
	
	private static SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
	private static HashMap<String, Integer> dic = new HashMap<String, Integer>();
    
	public static List<Comment> generateComment(File restoComment) throws Exception{
		
		List<Comment> result = new LinkedList<Comment>();
		BufferedReader buffer = new BufferedReader( new FileReader( restoComment ) );
		String line = buffer.readLine(); // consumo la primer línea que no tiene nada
		
		String resto = restoComment.getName();
		String 	serviceRank = null;
		String 	foodRank = null;
		String 	environmentRank = null;
		Date 	date = null;
		String 	user = null;
		String 	text = null;
		HashMap<String, Integer> words = null;
		
		while ( (line = buffer.readLine())!=null) {
			
			serviceRank = line.split("\\:")[1].trim();
			
			line = buffer.readLine();
			foodRank = line.split("\\:")[1].trim();
			
			line = buffer.readLine();
			String commentText = line.substring(10);
			text = replaceCodes(commentText); 
			
			line = buffer.readLine();
			if(!line.startsWith("    date")){ // si el comentario no termino
				
				while( !line.startsWith("    date") ){
					text += replaceCodes(line); 
					line = buffer.readLine();
				}
			}
			
			date = formatter.parse(line.split("\\:")[1]);
			
			line = buffer.readLine();
			user = line.split("/")[4]; // ej. user: http://mi.guiaoleo.com/members/17248
			
			line = buffer.readLine();
			environmentRank = line.split("\\:")[1].trim();
			
			words = getTextWords(text);
			
			//result.add(new Comment(resto,serviceRank,foodRank,environmentRank,date,user,text, words));
		}
	    
	    return result;
	}

	private static String replaceCodes(String text) {
		String result = text.replaceAll("\\\\xF3", "o");
		result = result.replaceAll("\\\\xE9", "e");
		result = result.replaceAll("\\\\xE1", "a");
		result = result.replaceAll("\\\\xED", "i");
		result = result.replaceAll("\\\\xFA", "u");
		result = result.replaceAll("\\\\xA8", "¿");
		result = result.replaceAll("\\\\\"", "");
		result = result.replaceAll("\\\\r\\\\n\\\\", " ");
		result = result.replaceAll("\"", "");
		return result;
	}
	
	private static HashMap<String, Integer> getTextWords(String text) {
		HashMap<String, Integer> map = new HashMap<String, Integer>();
		String processText = cleanText(text);
		String[] words = processText.split(" ");
		for (int i = 0; i < words.length; i++) {
			String word = words[i].trim();
			
			if( !EmptyWordManager.isEmptyWord(word) ){
				Integer value = new Integer(1);
				if( map.containsKey(word) ){
					value = map.get(word) + 1;
				}
				
				map.put(word, value);
				addOrModifyWordToDictionary(word);
			}
		}
		// TODO pasar el lematizador, para obtener la raiz de las palabras
		return map;
	}

	private static void addOrModifyWordToDictionary(String word) {
		Integer value = new Integer(1);
		if( dic.containsKey(word) ){
			value = dic.get(word) + 1;
		}
		dic.put(word, value);
	}

	private static String cleanText(String text) {
		String processText = text.replaceAll("\\,", " ");
		processText = processText.replaceAll("\\.", " ");
		processText = processText.replaceAll("\\;", " ");
		processText = processText.replaceAll("\\¿", " ");
		processText = processText.replaceAll("\\?", " ");
		return processText;
	}

	public static HashMap<String, Integer> getDic() {
		return dic;
	}
	
}
